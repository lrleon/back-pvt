#!/usr/bin/env ruby
# -*- coding: iso-8859-1 -*-

require 'optparse'
require 'csv'

class Table

  attr_reader :table

  def initialize(csv_name)
    pvt_rows = CSV.read(csv_name, headers: true)

    headers = pvt_rows.headers
    @units = headers.map { |h| l = h.split; [l[0], l[1]] }.to_h
    @names = headers.map { |h| [h.split[0], h] }.to_h

    @table = pvt_rows.map do |row|
      t = row[@names['t']]
      p = row[@names['p']]
      [[t, p], row]
    end.to_h
  end

  def col_name(name) name + ' ' + @units[name] end

  def is_valid_property_name(name) @table.first[1].key? col_name name end

  def get_property(name)
    col_name = col_name name
    @table.map { |k,row| [k, row[col_name]] }
  end

  # receives a pair [name, [values]]
  def Rvector(pair) "#{pair[0]} <- c(#{pair[1].join(',')})\n" end

  def plot_pressure(name, vals) # vals is get from get_property
    temps = {}
    vals.each do |pair|
      t = pair[0][0]
      p = pair[0][1]
      v = pair[1]
      entry = temps[t]
      if entry
        entry << [p, v]
      else
        temps[t] = [[p, v]]
      end
    end
    vectors = temps.map do |t, pair|
      pvals, vals = pair.select {|e1, e2| e1 && e2}.transpose
      ['t_' + t, 'p_' + t, pvals, 'v_' + t, vals]
    end
    pvals = vectors.map { |_, _, pvals, _, _| pvals }.flatten.map { |e| e.to_f }
    vals =  vectors.map { |_, _, _, _, vals| vals }.flatten.map { |e| e.to_f }
    xmin, xmax = pvals.min, pvals.max
    ymin, ymax = vals.min, vals.max
    s = ''
    vectors.each do |_, pname, pvals, vname, vals|
      s += Rvector([pname, pvals]) + Rvector([vname, vals])
    end
    s += "plot(0, type=\"n\", xlim=c(#{xmin}, #{xmax}), "\
         "ylim=c(#{ymin}, #{ymax}))\n"
    vectors.each_with_index do |e, i|
      s += "lines(#{e[1]}, #{e[3]}, col=#{i+1})\n"
    end
    s += Rvector(['cnames', vectors.map { |tname, _, _, _, _ | "\"#{tname}\"" }])
    s += Rvector(['cols', (1..vectors.size).to_a])
    s += "legend(\"topleft\", legend=cnames, lty=1, col=cols)"
  end
end

def execute_R_script(scr, points, file_name = 'tmp.R')
  str = "#!/usr/bin/Rscript\n"\
        "\n"\
        "X11()\n"\
        "#{scr}\n"
  if points
    x, y = points.split.each_slice(2).map{|x,y| [x,y]}.transpose
    str += "xx <- c(#{x.join(',')})\n"\
           "yy <- c(#{y.join(',')})\n"\
           "points(xx, yy)\n"
  end
  str += "message(\"Press Return To Continue\")\n"\
         "invisible(readLines(\"stdin\", n=1))\n"
  file = File.new(file_name, 'w')
  file << str
  file.close
  system("Rscript #{file_name}")
end

options = {}
options_parser = OptionParser.new do |opts|
  opts.on('-f CSV', '--file CSV', 'csv file') do |file_name|
    options[:file_name] = file_name
  end

  opts.on('-P PROPERTY', '--property PROPERTY', 'property name') do |name|
    options[:property] = name
  end

  opts.on('-R', '--R', 'direct execution of R script') do
    options[:R] = true
  end

  opts.on('-D xy-list', '--data xy-pair-list',
          'list of experimental points') do |list|
    options[:points] = list
  end
end

options_parser.parse!

file_name = options[:file_name]
fail 'csv file not given' unless file_name

data = Table.new file_name

property = options[:property]
fail 'Property not defined (option -P PROPERTY)' unless property
fail "Invalid property #{property}" unless data.is_valid_property_name property

if options[:R]
  execute_R_script(data.plot_pressure(property, data.get_property(property)),
                   options[:points])
else
  puts data.plot_pressure(property, data.get_property(property))
end

